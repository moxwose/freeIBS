#!/usr/bin/python -O
import sys
sys.path.append("/usr/local/ibs")
import ibs_client
import string
from ibs_exceptions import *
import traceback
from lib import *
import ras
import os

logger=Logger("/var/log/ibs/sc_voipAndInternetLogout.log")
debug=1
if debug:
    logger.write(str(os.environ))

try:

    account=radiusAttr('User-Name')
    ras_ip=radiusAttr('NAS-IP-Address')
    _type=radiusAttr('Framed-Protocol')
    in_bytes=radiusAttr('Acct-Input-Octets')
    out_bytes=radiusAttr('Acct-Output-Octets')



    if _type=="PPP":
	sock=ibs_client.SendCommand()
	ras_port=radiusAttr('NAS-Port')
	sock.send("dialupAndLanLogout(auth_name=%s\xffauth_pass=\xffauth_type=aaa_server\xffreason=\xffras_ip=%s\xffras_port=%s\xffin_bytes=%s\xffout_bytes=%s)\r\n"%(account,ras_ip,ras_port,in_bytes,out_bytes))
	ret=sock.recv()
	if debug:
    	    logger.write("return for %s is %s"%(account,ret))

    else:
	ras_port=radiusAttr('Cisco-NAS-Port')
	if len(account) != 12:
	    logger.write("Invalid account length --%s--" % account)
	    sys.exit(1)
	sock=ibs_client.SendCommand()
	username=account[:8]
	password=account[8:]
	call_origin=radiusAttr('H323-call-origin')[17:]
	call_type=radiusAttr('H323-call-type')[15:]
    
	if debug:
	    logger.write("got account -%s- username -%s- password -%s-"%(account,username,password))

	if call_type=="Telephony" and call_origin=="answer":
	    sock.send("telephonyCallStop(auth_name=%s\xffauth_pass=%s\xffauth_type=voip_user)\r\n"%(username,password))
	elif call_type=="VoIP" and call_origin=="originate":
	    sock.send("voipCallStop(auth_name=%s\xffauth_pass=%s\xffauth_type=voip_user\xffreason=\xffras_ip=%s\xffras_port=%s\xffin_bytes=%s\xffout_bytes=%s)\r\n"%(username,password,ras_ip,ras_port,in_bytes,out_bytes))
	else:
	    logger.write("Invalid call origin %s call type %s"%(call_origin,call_type))
	    sys.exit(-1)

	ret=sock.recv()
	if debug:
	    logger.write("return for %s is %s"%(account,ret))

except:
    logger.write("Exception!")
    t=""
    logger.write(t.join(traceback.format_exception(sys.exc_type, sys.exc_value, sys.exc_traceback)))
    raise
    sys.exit(-1)
    
